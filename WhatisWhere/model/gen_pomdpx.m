function [s_trans,obs_dist,reward]=gen_pomdpx(params,outfile)
% [s_trans,obs_dist,reward]=gen_pomdpx(params,outfile)

[s_trans]=pomdpx_state_trans(params.p_action_fail);
[obs_dist]=pomdpx_obs_func(params.obs_noise);
[reward]=pomdpx_reward_func(params.goal_reward);

n_state = size(s_trans,1);
n_world = size(s_trans,3);
n_action = size(s_trans,4);
n_obs = size(obs_dist,1);

num_precision = 1e6;

scenario = create_scenario;
[c_trans,c_sub,is_c_ind_valid] = create_coord_trans(scenario,params.action,params.p_action_fail);

b_world = round_dist(params.b_world,num_precision);

s_prob0 = zeros(1,n_state);
s_prob0([is_c_ind_valid true]) = 1;
s_prob0 = s_prob0./sum(s_prob0);
s_prob0 = round_dist(s_prob0,num_precision);

%% WRITE POMDPX file

fid=fopen(outfile,'w');

% header
fprintf(fid,'<?xml version=''1.0'' encoding=''ISO-8859-1''?>\n');

fprintf(fid,'<pomdpx version=''0.1'' id=''autogenerated'' xmlns:xsi=''http://www.w3.org/2001/XMLSchema-instance'' xsi:noNamespaceSchemaLocation=''pomdpx.xsd''>\n');

fprintf(fid,'<Description>auto-generated by gen_pomdpx.m</Description>\n\n');

% discount
fprintf(fid,'<Discount>%.6f</Discount>\n\n',params.discount);


fprintf(fid,'<Variable>\n');

% Variable: world -- which trucks are where
fprintf(fid,'\t<StateVar vnamePrev="world0" vnameCurr="world1" fullyObs="false">\n');
fprintf(fid,'\t\t<NumValues>%d</NumValues>\n',n_world);
fprintf(fid,'\t</StateVar>\n\n');

% Variable: state -- where the agent is
fprintf(fid,'\t<StateVar vnamePrev="state0" vnameCurr="state1" fullyObs="true">\n');
fprintf(fid,'\t\t<NumValues>%d</NumValues>\n',n_state);
fprintf(fid,'\t</StateVar>\n\n');

% Variable: Obs -- what the agent sees
fprintf(fid,'\t<ObsVar vname="obs">\n');
fprintf(fid,'\t\t<NumValues>%d</NumValues>\n',n_obs);
fprintf(fid,'\t</ObsVar>\n\n');

% Variable: Action -- what the agent does
fprintf(fid,'\t<ActionVar vname="action">\n');
fprintf(fid,'\t\t<ValueEnum>');
for na=1:n_action
  fprintf(fid,' %s',params.action_label{na});
end
fprintf(fid,'\n\t\t</ValueEnum>\n');
fprintf(fid,'\t</ActionVar>\n\n');

% Variable: Reward -- what the agent gets
fprintf(fid,'\t<RewardVar vname="cost"/>\n\n');
fprintf(fid,'\t<RewardVar vname="reward"/>\n\n');

fprintf(fid,'</Variable>\n\n');


fprintf(fid,'<InitialStateBelief>\n');

% initialState: world0
fprintf(fid,'\t<CondProb>\n');
fprintf(fid,'\t\t<Var>world0</Var>\n');
fprintf(fid,'\t\t<Parent>null</Parent>\n');
fprintf(fid,'\t\t<Parameter type="TBL">\n');
fprintf(fid,'\t\t\t<Entry>\n');
fprintf(fid,'\t\t\t\t<Instance>-</Instance>\n');
fprintf(fid,'\t\t\t\t<ProbTable>');
for w0=1:n_world
  fprintf(fid,' %.6f',b_world(w0));
end
fprintf(fid,'\n\t\t\t\t</ProbTable>\n');
fprintf(fid,'\t\t\t</Entry>\n');
fprintf(fid,'\t\t</Parameter>\n');
fprintf(fid,'\t</CondProb>\n\n');

% initialState: state0
fprintf(fid,'\t<CondProb>\n');
fprintf(fid,'\t\t<Var>state0</Var>\n');
fprintf(fid,'\t\t<Parent>null</Parent>\n');
fprintf(fid,'\t\t<Parameter type="TBL">\n');
fprintf(fid,'\t\t\t<Entry>\n');
fprintf(fid,'\t\t\t\t<Instance>-</Instance>\n');
fprintf(fid,'\t\t\t\t<ProbTable>');
for s0=1:n_state
  fprintf(fid,' %.6f',s_prob0(s0));
end
fprintf(fid,'\n\t\t\t\t</ProbTable>\n');
%fprintf(fid,'\t\t\t\t<ProbTable>uniform</ProbTable>\n');
fprintf(fid,'\t\t\t</Entry>\n');
fprintf(fid,'\t\t</Parameter>\n');
fprintf(fid,'\t</CondProb>\n\n');

fprintf(fid,'</InitialStateBelief>\n\n');


fprintf(fid,'<StateTransitionFunction>\n');

% StateTrans: world1
fprintf(fid,'\t<CondProb>\n');
fprintf(fid,'\t\t<Var>world1</Var>\n');
fprintf(fid,'\t\t<Parent>world0</Parent>\n');
fprintf(fid,'\t\t<Parameter type="TBL">\n');
fprintf(fid,'\t\t\t<Entry>\n');
fprintf(fid,'\t\t\t\t<Instance>- -</Instance>\n');
fprintf(fid,'\t\t\t\t<ProbTable>identity</ProbTable>\n');
fprintf(fid,'\t\t\t</Entry>\n');
fprintf(fid,'\t\t</Parameter>\n');
fprintf(fid,'\t</CondProb>\n\n');

% StateTrans: state1
fprintf(fid,'\t<CondProb>\n');
fprintf(fid,'\t\t<Var>state1</Var>\n');
fprintf(fid,'\t\t<Parent>action world0 state0</Parent>\n');
fprintf(fid,'\t\t<Parameter type="TBL">\n');

for w0=1:n_world
  for s0=1:n_state
    for na=1:n_action
      fprintf(fid,'\t\t\t<Entry>\n');
      fprintf(fid,'\t\t\t\t<Instance>%s s%d s%d -</Instance>\n',params.action_label{na},w0-1,s0-1);
      fprintf(fid,'\t\t\t\t<ProbTable>');
      for s1=1:n_state
        fprintf(fid,' %.6f',s_trans(s1,s0,w0,na));
      end
      fprintf(fid,'\n\t\t\t\t</ProbTable>\n');
      fprintf(fid,'\t\t\t</Entry>\n');
    end
  end
end
fprintf(fid,'\t\t</Parameter>\n');
fprintf(fid,'\t</CondProb>\n\n');

fprintf(fid,'</StateTransitionFunction>\n\n');


% ObsFunc:
fprintf(fid,'<ObsFunction>\n');
fprintf(fid,'\t<CondProb>\n');
fprintf(fid,'\t\t<Var>obs</Var>\n');
fprintf(fid,'\t\t<Parent>world1 state1</Parent>\n');
fprintf(fid,'\t\t<Parameter type="TBL">\n');

for w1=1:n_world
  for s1=1:n_state
    fprintf(fid,'\t\t\t<Entry>\n');
    fprintf(fid,'\t\t\t\t<Instance>s%d s%d -</Instance>\n',w1-1,s1-1);
    fprintf(fid,'\t\t\t\t<ProbTable>');
    for no=1:n_obs
      fprintf(fid,' %.6f',obs_dist(no,s1,w1));
    end
    fprintf(fid,'\n\t\t\t\t</ProbTable>\n');
    fprintf(fid,'\t\t\t</Entry>\n');

  end
end

fprintf(fid,'\t\t</Parameter>\n');
fprintf(fid,'\t</CondProb>\n');

fprintf(fid,'</ObsFunction>\n\n');

% RewardFunc:
fprintf(fid,'<RewardFunction>\n');
% Cost:
fprintf(fid,'\t<Func>\n');
fprintf(fid,'\t\t<Var>cost</Var>\n');
fprintf(fid,'\t\t<Parent>state0</Parent>\n');
fprintf(fid,'\t\t<Parameter type="TBL">\n');
fprintf(fid,'\t\t\t<Entry>\n');
fprintf(fid,'\t\t\t\t<Instance>-</Instance>\n');
fprintf(fid,'\t\t\t\t<ValueTable>');
for s0=1:(n_state-1)
  fprintf(fid,' %.6f', params.action_reward);
end
fprintf(fid,' %.6f', 0);
fprintf(fid,'\n\t\t\t\t</ValueTable>\n');
fprintf(fid,'\t\t\t</Entry>\n');      
fprintf(fid,'\t\t</Parameter>\n');
fprintf(fid,'\t</Func>\n');
% Reward:
fprintf(fid,'\t<Func>\n');
fprintf(fid,'\t\t<Var>reward</Var>\n');
fprintf(fid,'\t\t<Parent>world0 state1 state0</Parent>\n');
fprintf(fid,'\t\t<Parameter type="TBL">\n');

for s0=1:n_state
  fprintf(fid,'\t\t\t<Entry>\n');
  fprintf(fid,'\t\t\t\t<Instance>- s%d s%d</Instance>\n',n_state-2,s0-1);
  fprintf(fid,'\t\t\t\t<ValueTable>');
  for w0=1:n_world
    fprintf(fid,' %.6f',reward(s0,w0));
  end
  fprintf(fid,'\n\t\t\t\t</ValueTable>\n');
  fprintf(fid,'\t\t\t</Entry>\n');      
end

fprintf(fid,'\t\t</Parameter>\n');
fprintf(fid,'\t</Func>\n');

fprintf(fid,'</RewardFunction>\n\n');

fprintf(fid,'</pomdpx>\n');

if fid~=1
  fclose(fid);
end


function dist = round_dist(dist,num_precision)
% round and normalize distribution


dist = dist./sum(dist);
dist = fix(dist*num_precision)./num_precision;
ind = find(dist);
dif = round((1-sum(dist))*num_precision);
dist(ind(1:dif)) = dist(ind(1:dif)) + 1/num_precision;
